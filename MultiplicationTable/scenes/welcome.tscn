[gd_scene load_steps=10 format=2]

[ext_resource path="res://resources/COMIC.TTF" type="DynamicFontData" id=1]
[ext_resource path="res://images/splash_screen_little.png" type="Texture" id=2]
[ext_resource path="res://sounds_ogg/[INTRO].ogg" type="AudioStream" id=3]
[ext_resource path="res://resources/timeingame.tscn" type="PackedScene" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

func _ready() -> void:
	$language.apply_language()

func _on_Timer_timeout() -> void:
	get_tree().change_scene(\"res://scenes/main_menu.tscn\")

func _on_audio_timer_timeout() -> void:
	$intro_sound.play()
"

[sub_resource type="DynamicFont" id=2]
size = 25
font_data = ExtResource( 1 )

[sub_resource type="Animation" id=3]
resource_name = "rotation"
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath("transition:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1.7, 2 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("CenterContainer/TextureRect:rect_rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( -2, 1 ),
"update": 0,
"values": [ -1080.0, 360.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("CenterContainer/TextureRect:rect_scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 1, 1 ) ]
}

[sub_resource type="GDScript" id=4]
script/source = "extends AnimationPlayer

func _ready():
	play(\"rotation\")"

[sub_resource type="GDScript" id=5]
script/source = "extends Node

var language : Language = Language.new()

func _ready() -> void:
	language.load_data()

export master func apply_language():
	language.load_data()
	
	if language.language == 'en':
		get_parent().get_node(\"VBoxContainer/Label\").text = \"by Luis Romero (@CreyTuning)\""

[node name="welcome" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
rect_rotation = 720.0
script = SubResource( 1 )

[node name="ColorRect" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="VBoxContainer" type="VBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_bottom = -20.0
alignment = 2

[node name="Label" type="Label" parent="VBoxContainer"]
margin_top = 759.0
margin_right = 480.0
margin_bottom = 834.0
custom_fonts/font = SubResource( 2 )
custom_colors/font_color = Color( 0.501961, 0.52549, 0.6, 1 )
text = "Ofrecido por
Luis Romero (@CreyTuning)"
align = 1

[node name="CenterContainer" type="CenterContainer" parent="."]
editor/display_folded = true
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="TextureRect" type="TextureRect" parent="CenterContainer"]
margin_left = 240.0
margin_top = 427.0
margin_right = 240.0
margin_bottom = 427.0
size_flags_horizontal = 3
size_flags_vertical = 3
texture = ExtResource( 2 )
expand = true
stretch_mode = 4

[node name="intro_sound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 3 )
volume_db = -5.0

[node name="Timer" type="Timer" parent="."]
wait_time = 2.0
one_shot = true
autostart = true

[node name="audio_timer" type="Timer" parent="."]
wait_time = 0.2
one_shot = true
autostart = true

[node name="transition" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 1, 1, 1, 0 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/rotation = SubResource( 3 )
script = SubResource( 4 )

[node name="timeingame" parent="." instance=ExtResource( 4 )]

[node name="language" type="Node" parent="."]
script = SubResource( 5 )

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
[connection signal="timeout" from="audio_timer" to="." method="_on_audio_timer_timeout"]
